// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   // Put you code here:
   // zx
   Mux16(a=x, b=false, sel=zx, out=updateZeroX);
   // nx
   Not16(in=updateZeroX, out=notUpdateZeroX);
   Mux16(a=updateZeroX, b=notUpdateZeroX, sel=nx, out=selX);
   
   // Mux16(a=x, b=false, sel=zx, out=zeroX);
   // nx
   // Not16(in=x, out=notX);
   // select zx/nx/normal
   // Mux16(a=x, b=zeroX, sel=zx, out=tmpSelX);
   // Mux16(a=tmpSelX, b=notX, sel=nx, out=selX);

   // zy
   Mux16(a=y, b=false, sel=zy, out=updateZeroY);
   // ny
   Not16(in=updateZeroY, out=notUpdateZeroY);
   Mux16(a=updateZeroY, b=notUpdateZeroY, sel=ny, out=selY);

   // Mux16(a=y, b=false, sel=zy, out=zeroY);
   // ny
   // Not16(in=y, out=notY);
   // select zy/ny/normal
   // Mux16(a=y, b=zeroY, sel=zy, out=tmpSelY);
   //Mux16(a=tmpSelY, b=notY, sel=ny, out=selY);

   // x and y
   And16(a=selX, b=selY, out=xAndY);
   // x plus y
   Add16(a=selX, b=selY, out=xPlusY);

   // outを反転させるか
   Mux16(a=xAndY, b=xPlusY, sel=f, out=xy);
   Not16(in=xy, out=notXY);
   Mux16(a=xy, b=notXY, sel=no, out=out);

   // ng
   // xy
   And16(a=xy, b=true, out[15]=memoNgXY, out[0..14]=tmpNgXY);
   // notXY
   And16(a=notXY, b=true, out[15]=memoNgNotXY, out[0..14]=tmpNgNotXY);
   // select ng
   Mux(a=memoNgXY, b=memoNgNotXY, sel=no, out=ng);

   // zr
   // xyのzr
   Inc16(in=notXY, out[15]=incNotXY15, out[0..14]=tmpIncNotXY14);
   Not(in=incNotXY15, out=notIncNotXY);
   And(a=notIncNotXY, b=memoNgNotXY, out=xyZr);
   // notXYのzr
   Inc16(in=xy, out[15]=incXY15, out[0..14]=tmpIncXY14);
   Not(in=incXY15, out=notIncXY);
   And(a=notIncXY, b=memoNgXY, out=notXYZr);
   // select zr
   Mux(a=xyZr, b=notXYZr, sel=no, out=zr);

}